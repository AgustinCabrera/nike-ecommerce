// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String?
  role      UserRole @default(CUSTOMER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart[]
}

enum UserRole {
  ADMIN
  CUSTOMER
  EDITOR
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  imgeUrl     String
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  sizes       Size[]
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
  CartItem    CartItem[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  imgUrl    String @default("https://static.nike.com/a/images/t_PDP_1728_v1/f_auto,q_auto:eco/ebbf9087-68b4-4546-94bb-15131bc0acc1/M+NK+DF+FLX+WVN+9IN+SHORT.png")
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String   @id @default(uuid())
  value     String // M,L,XL
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum OrderStatus {
  PENDING
  DELIVERED
  CANCELLED
  SHIPPED
}

model OrderItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Cart {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int        @unique
  items       CartItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
model CartItem {
  id          String     @id @default(uuid())
  cart        Cart       @relation(fields: [cartId], references: [id])
  cartId      String
  product     Product    @relation(fields: [productId], references: [id])
  productId   String
  quantity    Int
  createdAt   DateTime   @default(now())
}
